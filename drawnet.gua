#!/usr/local/bin/glwmguash

source("DrawNetController.gua")
source("CircularLayout.gua")
source("KcoreLayout.gua")
source("RandomLayout.gua")
source("ExpansionLayout.gua")
source("RetractionLayout.gua")
source("FruchtermanReingold.gua")

algorithmChosen = -1;
cont = 0;
rotate = 0;
orientation = 0;
label = 0;

script_file = "";
script_path = "";


function display(window){
    glClear(GL_COLOR_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
        
    widthArea = getWidthArea();
    heightArea = getHeightArea();
    
    glViewport(0, 0, widthArea, heightArea);
    glOrtho(0.0, 1.0, 1.0, 0.0, 1.0, -1.0);
    glMatrixMode(GL_MODELVIEW);

   
    if($algorithmChosen == 1){
        execution();
    }elseif($algorithmChosen == 7){
        tempoInicial = time();
        $cont = $cont + 1;
        calculateForces();
        tempoFinal = time()
        tempoExecucao = tempoFinal - tempoInicial
        println("Tempo de execução passagem "+ $cont +" : " + tempoExecucao)          
    }

    #Obtem posição dos vértices do eixo x e y
    vertexAxisX = getPositionsVertexAxisX();
    vertexAxisY = getPositionsVertexAxisY();
    
    edgeAxisX = getPositionsEdgesAxisX();
    edgeAxisY = getPositionsEdgesAxisY();
    
    namesVertices = getNameVertices();
  

    #define cor de fundo
    glClearColor(1.0,1.0,1.0,0.0);
    #realiza limpeza de cor urrentPositionValue(value);de fundo
    glClear(GL_COLOR_BUFFER_BIT);

    for(i=0; i<length(edgeAxisX); i=i+2){
        glBegin(GL_LINES);
            glColor(0.0, 0.0, 1.0, 1.0);
            glVertex(vertexAxisX[edgeAxisX[i]], vertexAxisY[edgeAxisY[i]], 0);
            glVertex(vertexAxisX[edgeAxisX[i+1]], vertexAxisY[edgeAxisY[i+1]], 0);
        glEnd();
    }
    #define tamanho do verice
    glPointSize(7);
    for(i=0; i<length(vertexAxisX); i=i+1){
        glBegin(GL_POINTS);
            glColor(1.0, 0.0, 0.0, 1.0);
            glVertex(vertexAxisX[i], vertexAxisY[i], 0);            
        glEnd();
        if($label == 1){
            glColor(0.0, 0.0, 0.0, 1.0);
            glfDrawText(vertexAxisX[i] + 0.010, vertexAxisY[i] + 0.012, $script_path + "/fonts/6x13.bdf", namesVertices[i]);
        }
    }
    
    glBegin(GL_LINES);
        glColor(0.0, 0.0, 0.0, 1.0);
            glVertex(1, 0, 0);
            glVertex(1, 1, 0);
    glEnd();
    glFlush();
    
    glwmSwapBuffers(window);
}

function mouseMotion(window, x, y) {
    currentPosition = getCurrentSelectedVertex();
    if(currentPosition == -1){
    }else{
        valueX = convertPositionAxisInPositionClickMouseX(x);
        valueY = convertPositionAxisInPositionClickMouseY(y);
        setEspecificValueInPositionVertexAxisX(currentPosition, valueX);
        setEspecificValueInPositionVertexAxisY(currentPosition, valueY);
    }
}

function mouseButtonPress(window, button, state, x, y) {
    printf("Mouse button press: button = %d, state = %d, x = %d, y = %d\n", button, state, x, y);
    if(button == 0){
        returnVertexFound = findVertice(x,y);
        printf("Retorno funcao" + returnVertexFound)
        if(returnVertexFound == -1){        
            printf("vertice não encontrado =%d\n", returnVertexFound);
        }else{
            setCurrentSelectedVertex(returnVertexFound);
            printf("vertice encontrado =%d\n", returnVertexFound);
        }
    }elseif(button == 2){
        returnVertexFound = findVertice(x,y);
        validator = getValidatorSelectedVertex();        
        if(returnVertexFound == -1){
            printf("vertice não encontrado =%d\n", returnVertexFound);
            setValidatorSelectedVertex("false");
        }elseif(returnVertexFound != -1 && validator == "false"){
            setValidatorSelectedVertex("true");
            setFristSelectedVertex(returnVertexFound);
            
            printf("Primeiro ponto da aresta no array temporario =%d\n", returnVertexFound);
        }elseif(returnVertexFound != -1 && validator == "true"){
            setValidatorSelectedVertex("false");
            setSecondSelectedVertex(returnVertexFound);

           addNewEdge();

            printf("Criado nova aresta do vértice=%d ao vértice=%d \n", getFristSelectedVertex(), getSecondSelectedVertex);
        }else{
            setValidatorSelectedVertex("false");
        }
    }
}

function mouseButtonRelease(window, button, state, x, y) {
    printf("Mouse button release: button = %d, state = %d, x = %d, y = %d\n", button, state, x, y);
     currentPosition = getCurrentSelectedVertex();
     if(currentPosition == -1){
        printf("Nada a modificar no array\n");
    }else{
        valueX = convertPositionAxisInPositionClickMouseX(x);
        valueY = convertPositionAxisInPositionClickMouseY(y);
        setEspecificValueInPositionVertexAxisX(getCurrentSelectedVertex(), valueX);
        setEspecificValueInPositionVertexAxisY(getCurrentSelectedVertex(), valueY);
        setCurrentSelectedVertex(-1);
    }
}

function keyPress(window, key, x, y) {
    printf("Key press: key = %d, x = %d, y = %d\n", key, x, y);
    if (key == 27) {
        glwmExitMainLoop();
    }elseif(key == 101){
        if(($algorithmChosen == 5) || ($algorithmChosen == 4) || ($algorithmChosen == 6)){
            expansion();
        }
    }elseif(key == 99){
        if(($algorithmChosen == 6) || ($algorithmChosen == 4) || ($algorithmChosen == 5)){
            retraction();
        }
    }elseif(key == 32){
        if($algorithmChosen == 1){
            $algorithmChosen = -1
        }elseif($algorithmChosen == -1){
            $algorithmChosen = 1
        }elseif($algorithmChosen == 7){

            $algorithmChosen = -7
        }elseif($algorithmChosen == -7){
            $algorithmChosen = 7
        }
    }elseif(key == 108){
        if($label == 0){
            $label = 1;
        }else{
            $label = 0;
        }
    }elseif(key == 120){
        $rotate = 1;
        $orientation = 1;
    }elseif(key == 121){
        $rotate = 1;
        $orientation = 2;
    }
}

window = glwmCreateWindow("Network Visualization");

if (!exists("window")) {
    printf("Error: %s.\n", "creating window");
    
    exit(1);
}

function closeWindow(window) {
    glwmExitMainLoop();
}

function initializeVisualInterface(){
    glwmRegisterDisplayFunc(window, "display");
    glwmRegisterMouseButtonPressFunc(window, "mouseButtonPress");
    glwmRegisterMouseButtonReleaseFunc(window, "mouseButtonRelease");
    glwmRegisterMouseMotionFunc(window, "mouseMotion");
    glwmRegisterKeyPressFunc(window, "keyPress");
    glwmRegisterCloseFunc(window, "closeWindow");

    glwmSetWindowTitle(window, "DrawNet");

    glwmSetWindowPos(window, 100, 100);

    glwmSetWindowSize(window, getWidthArea(), getHeightArea());

    glwmMainLoop();

    glwmDestroyWindow(window);

    glwmTerminate();
}

function interfaceCommunication(nameAlgorithm, fileName){
    choiceAlgorithm(nameAlgorithm, fileName);
    initializeVisualInterface();

    initializeVisualInterfaceHelp($script_path);        
}

input_file = "noname"
algorithm = "circular"

#
# Main program.
#
if (argc < 3) {
    println("Usage: visnet option1 value1 [option1 value1]")
    exit
}

i = 2

while (i < argc) {
    if ((argv[i] == "-h") || (argv[i] == "--help")) {
        println("Usage: visnet option1 value1 [option1 value1]")
        println("-h    --help           show the options sumary")
        println("-i                     input file")
        println("      --fruchterman    Force Direct Fruchterman algorithm")
        println("      --circular       Circular Layout algorithm")
        println("      --kcore          K-Core Layout algorithm")
        println("      --random         Random Layout algorithm")
        println("      --expansion      Expansion Layout algorithm")
        println("      --retraction     Retraction Layout algorithm")
        exit(0)
    } elseif (argv[i] == "-i") {
        i = i + 1
        input_file = argv[i]
        $script_file = fsFullPath($argv[1]);        
    } elseif (argv[i] == "--fruchterman") {
        algorithm = "fruchterman"
    } elseif (argv[i] == "--circular") {
        algorithm = "circular"
    } elseif (argv[i] == "--kcore") {
        algorithm = "kcore"
    } elseif (argv[i] == "--random") {
        algorithm = "random"
    } elseif (argv[i] == "--expansion") {
        algorithm = "expansion"
    } elseif (argv[i] == "--retraction") {
        algorithm = "retraction"
    }
    i = i + 1
    # Get the app path...
    $script_path = fsPath($script_file);
    println("Script path: " + $script_path)
}

t1 = glwmGetTime();

choiceAlgorithm(algorithm, input_file);
initializeVisualInterface();        
